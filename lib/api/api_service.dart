import 'dart:convert';
import '../model/request/register_request.dart' as req;
import '../model/response/login_response.dart' as res;
import 'package:http/http.dart' as http;
import '../config/app_config.dart';

// Import the new models we created
import '../model/request/login_request.dart';
import '../model/request/update_profile_request.dart';
import '../model/request/update_profile_rider_request.dart';
import '../model/request/address_request.dart';
import '../model/response/searchphon_response.dart';
import '../model/request/create_delivery_request.dart';
import '../model/response/delivery_list_response.dart';

class ApiService {
  final String _baseUrl = AppConfig.baseUrl;

  // New function for user login
  Future<res.LoginResponse> login(LoginRequest payload) async {
    final response = await http.post(
      Uri.parse('$_baseUrl/auth/login'), // The endpoint from your Go backend
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(payload.toJson()),
    );

    if (response.statusCode == 200) {
      print("DEBUG LOGIN RESPONSE: ${response.body}");
      final responseBody = jsonDecode(response.body);
      return res.LoginResponse.fromJson(responseBody);
    } else {
      // If the server did not return a 200 OK response,
      // then throw an exception.
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to login');
    }
  }

  // --- Your existing register functions below ---

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å Customer
  Future<String> registerCustomer(req.RegisterCustomerPayload payload) async {
    final response = await http.post(
      Uri.parse('$_baseUrl/auth/register/customer'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(payload.toJson()),
    );

    if (response.statusCode == 200) {
      return "Registration successful!";
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to register customer');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å Rider
  Future<String> registerRider(req.RegisterRiderPayload payload) async {
    final response = await http.post(
      Uri.parse('$_baseUrl/auth/register/rider'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(payload.toJson()),
    );

    if (response.statusCode == 200) {
      return "Registration successful!";
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to register rider');
    }
  }

  // **** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ****
  Future<res.LoginResponse> updateProfile({
    required String token,
    required UpdateProfilePayload payload,
  }) async {
    final response = await http.put(
      Uri.parse('$_baseUrl/api/user/profile'), // Endpoint ‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á Go
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode(payload.toJson()),
    );

    if (response.statusCode == 200) {
      final responseBody = jsonDecode(response.body);
      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á body ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏´‡∏≤ updatedData
      return res.LoginResponse.fromJson(responseBody);
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to update profile');
    }
  }

  // +++ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå Rider +++
  Future<res.LoginResponse> updateRiderProfile({
    required String token,
    required UpdateRiderProfilePayload payload,
  }) async {
    final response = await http.put(
      Uri.parse('$_baseUrl/api/rider/profile'), // Endpoint ‡∏ù‡∏±‡πà‡∏á Go
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode(payload.toJson()),
    );

    if (response.statusCode == 200) {
      final responseBody = jsonDecode(response.body);

      // ‚úÖ backend ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô { message, updatedData: { userProfile, roleSpecificData } }
      // ‡πÄ‡∏£‡∏≤‡πÅ‡∏õ‡∏•‡∏á updatedData ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô LoginResponse ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
      if (responseBody['updatedData'] != null) {
        return res.LoginResponse.fromJson(responseBody['updatedData']);
      } else {
        return res.LoginResponse.fromJson(responseBody);
      }
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to update rider profile');
    }
  }

  // **** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ****
  Future<List<res.Address>> addAddress({
    required String token,
    required AddressPayload payload,
  }) async {
    print("üì§ Sending payload (add): ${jsonEncode(payload.toJson())}");
    final response = await http.post(
      Uri.parse('$_baseUrl/api/user/addresses'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode(payload.toJson()),
    );

    if (response.statusCode == 201) {
      final responseBody = jsonDecode(response.body);

      // ‚úÖ Debug: ‡∏î‡∏π‡∏ß‡πà‡∏≤ backend ‡∏™‡πà‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
      print("üì¶ addAddress response: $responseBody");

      if (responseBody is Map<String, dynamic>) {
        // ‡∏ñ‡πâ‡∏≤ backend ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        if (responseBody.containsKey('addresses')) {
          // ‡∏Å‡∏£‡∏ì‡∏µ backend ‡∏™‡πà‡∏á array addresses
          final List<dynamic> addressList = responseBody['addresses'];
          return addressList.map((json) => res.Address.fromJson(json)).toList();
        } else {
          // ‡∏Å‡∏£‡∏ì‡∏µ backend ‡∏™‡πà‡∏á address ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
          return [res.Address.fromJson(responseBody)];
        }
      }

      return [];
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to add address');
    }
  }

  // **** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ****
  Future<List<res.Address>> updateAddress({
    required String token,
    required String addressId,
    required AddressPayload payload,
  }) async {
    print("üì§ Sending payload (update): ${jsonEncode(payload.toJson())}");
    final response = await http.put(
      Uri.parse('$_baseUrl/api/user/addresses/$addressId'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode(payload.toJson()),
    );

    if (response.statusCode == 200) {
      final responseBody = jsonDecode(response.body);
      final List<dynamic> addressList = responseBody['addresses'];
      // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ Dart ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å Address.fromJson ‡πÅ‡∏•‡πâ‡∏ß
      return addressList.map((json) => res.Address.fromJson(json)).toList();
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to update address');
    }
  }

  // **** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ****
  Future<FindUserResponse> findUserByPhone({
    required String token,
    required String phone,
  }) async {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏û‡∏£‡πâ‡∏≠‡∏° Query Parameter (‡πÄ‡∏ä‡πà‡∏ô .../find?phone=098xxxxxxx)
    final uri = Uri.parse(
      '$_baseUrl/api/users/find',
    ).replace(queryParameters: {'phone': phone});

    final response = await http.get(
      uri,
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token', // ‡∏™‡πà‡∏á Token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
      },
    );

    if (response.statusCode == 200) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏à‡∏≠, ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô FindUserResponse
      final responseBody = jsonDecode(response.body);
      return FindUserResponse.fromJson(responseBody);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ (404) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to find user');
    }
  }

  // +++ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Rider) +++
  Future<List<FindUserResponse>> getAllCustomers({
    required String token,
  }) async {
    final response = await http.get(
      Uri.parse('$_baseUrl/api/users/customers'), // Endpoint ‡πÉ‡∏´‡∏°‡πà
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      },
    );

    if (response.statusCode == 200) {
      final responseBody = jsonDecode(response.body);
      // Backend ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô { "customers": [...] }
      final List<dynamic> customerListJson = responseBody['customers'];

      // ‡πÅ‡∏õ‡∏•‡∏á List ‡∏Ç‡∏≠‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô List ‡∏Ç‡∏≠‡∏á FindUserResponse
      return customerListJson
          .map((json) => FindUserResponse.fromJson(json))
          .toList();
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to fetch customers');
    }
  }

  // **** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏™‡∏£‡πâ‡∏≤‡∏á" ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á ****
  Future<String> createDelivery({
    required String token,
    required CreateDeliveryPayload payload,
  }) async {
    final response = await http.post(
      Uri.parse('$_baseUrl/api/deliveries'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode(payload.toJson()),
    );

    if (response.statusCode == 201) {
      // 201 Created
      final responseBody = jsonDecode(response.body);
      return responseBody['message'];
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to create delivery');
    }
  }

  Future<DeliveryListResponse> getDeliveries({required String token}) async {
    final response = await http.get(
      Uri.parse('$_baseUrl/api/user/deliveries'), // Endpoint ‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á Go
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token', // ‡∏™‡πà‡∏á Token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
      },
    );

    if (response.statusCode == 200) {
      final responseBody = jsonDecode(response.body);
      // ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô DeliveryListResponse
      return DeliveryListResponse.fromJson(responseBody);
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to fetch deliveries');
    }
  }

  // +++ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Rider ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà +++
  Future<List<Delivery>> getPendingDeliveries({required String token}) async {
    final response = await http.get(
      // Endpoint ‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á Go ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
      Uri.parse('$_baseUrl/api/rider/deliveries/pending'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token', // ‡∏™‡πà‡∏á Token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
      },
    );

    if (response.statusCode == 200) {
      final responseBody = jsonDecode(response.body);

      // Backend ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô { "pendingDeliveries": [...] }
      // ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å key "pendingDeliveries"
      final List<dynamic> deliveryListJson = responseBody['pendingDeliveries'];

      // ‡πÅ‡∏õ‡∏•‡∏á List ‡∏Ç‡∏≠‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô List ‡∏Ç‡∏≠‡∏á Delivery object
      return deliveryListJson.map((json) => Delivery.fromJson(json)).toList();
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(
        errorBody['error'] ?? 'Failed to fetch pending deliveries',
      );
    }
  }

  // +++ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Rider ‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô +++
  Future<String> acceptDelivery({
    required String token,
    required String deliveryId,
  }) async {
    final response = await http.post(
      // Endpoint ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏ô Postman
      Uri.parse('$_baseUrl/api/rider/deliveries/$deliveryId/accept'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-T',
        'Authorization': 'Bearer $token', // ‡∏™‡πà‡∏á Token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
      },
      // POST request ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ body
    );

    if (response.statusCode == 200) {
      // 200 OK: ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      final responseBody = jsonDecode(response.body);
      return responseBody[
          'message']; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Delivery accepted successfully"
    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î Error (‡πÄ‡∏ä‡πà‡∏ô 409 Conflict ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to accept delivery');
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
  Future<void> updateRiderLocation({
    required String token,
    required double latitude,
    required double longitude,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/api/rider/location'), // Endpoint ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô Go
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({'latitude': latitude, 'longitude': longitude}),
      );

      if (response.statusCode != 200) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô Error
        final errorBody = jsonDecode(response.body);
        throw Exception(errorBody['error'] ?? 'Failed to update location');
      }
      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
      print('Location updated successfully');
    } catch (e) {
      // ‡∏û‡∏¥‡∏°‡∏û‡πå error ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏î‡∏π ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
      print('Error updating location: $e');
    }
  }

  // +++ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ +++
  Future<String> confirmPickup({
    required String token,
    required String deliveryId,
    required String pickupImageURL,
  }) async {
    final response = await http.put(
      Uri.parse('$_baseUrl/api/rider/deliveries/$deliveryId/pickup'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode({'pickupImageURL': pickupImageURL}),
    );

    if (response.statusCode == 200) {
      final responseBody = jsonDecode(response.body);
      return responseBody['message'];
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to confirm pickup');
    }
  }

  // +++ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ +++
  Future<String> confirmDelivery({
    required String token,
    required String deliveryId,
    required String deliveredImageURL,
  }) async {
    final response = await http.put(
      Uri.parse('$_baseUrl/api/rider/deliveries/$deliveryId/deliver'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode({'deliveredImageURL': deliveredImageURL}),
    );

    if (response.statusCode == 200) {
      final responseBody = jsonDecode(response.body);
      return responseBody['message'];
    } else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to confirm delivery');
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ accepted ‡∏´‡∏£‡∏∑‡∏≠ picked_up)
  Future<Delivery?> getCurrentDelivery({required String token}) async {
    final response = await http.get(
      Uri.parse(
          '$_baseUrl/api/rider/deliveries/current'), // Endpoint ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      },
    );

    // 200 OK ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
    if (response.statusCode == 200) {
      final responseBody = jsonDecode(response.body);
      // Backend ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• delivery ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á object
      return Delivery.fromJson(responseBody);
    }
    // 204 ‡∏´‡∏£‡∏∑‡∏≠ 404 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
    else if (response.statusCode == 204 || response.statusCode == 404) {
      return null;
    }
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡∏∑‡∏≠ Error
    else {
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['error'] ?? 'Failed to get current delivery');
    }
  }
}
